version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: posts_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: posts_app
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - posts_network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: posts_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - posts_network

  # Backend API (Node.js + Express + Prisma)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: posts_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://admin:password123@postgres:5432/posts_app
      JWT_SECRET: your-super-secret-jwt-key-here
      NODE_ENV: development
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
    networks:
      - posts_network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: posts_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - posts_network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  posts_network:
    driver: bridge